Fix UDP checksum (Udph::SetCSum())

Add Thread TLS LastError, GetLastError
Add error.h with ERR_xxx, GetLastError, SetLastError, include from enetcore.h

Make Ip::Send call SetLastError for ERR_NO_ROUTE

Add UDP sockets

Add ICMP

Add ARP timer to IP (ARP rexmit, ARP timeout)

Fix SPI driver
- Run using FIQ
- Operations needed:
  1. Send byte sequence
  2. Send 0xff and read, returning result
  3. Repeat 2 at a given usec interval, and a number of times until non 0xff
  4. Repeat 3 2-4 times and return result in an uint32_t
  5. Repeat 2 to fill a buffer
- Parameterize polarity and phase

Implement SD card block driver

Implement CRC7

Implement FAT32

EventObject should keep count of waiters and don't call
WakeAll/WakeSingle on a zero count.

Run system clock fully off Timer1
- Don't stop or reset TC, just interrupt on match
- In handler, add TC to system clock and reload with new value
- Increase default timer to 8 seconds

Improve exeption handler - traceback all threads, print thread state
- Write tool to symbolize console crash output

Thread features
- Priority willing
- Thread structure should be in internal mem (maybe at the top of the
  thread's stack) - for single-cycle access
- Track max stack usage

Containers should have a _resize flag to enable/disable auto resizing.

Optimize memset, memcpy
- If operands are 32 bit aligned, use 32-bit ops

Implement Watchdog
- Use hw watchdog

Assign an internal flash sector for non-volatile params, like the
ethernet Mac address.  See if we can set aside a small internet
flash sector in link.cmd.

---

Code footprint (as of #105):

 -Os         				 84k
 -Os -DTRACE 				 85k
 -Os -DTRACE -DDEBUG		 95k
 -O0 -DTRACE -DDEBUG		189k
 -O1 -DTRACE -DDEBUG		135k
 -O2 -DTRACE -DDEBUG		130k
 -O3 -DTRACE -DDEBUG		139k

---

CS8900 notes:

I/O mode:
- Eight 16-bit addresses
- Default at power up

Powerup configuration:
- Set IObase in PacketPage+0x20 (default 0x300)
- 0x3000 in IObase+0xa as signature after reset; write nonzero value
  (4.10 page 75)
- Wait for init/calibration done (R16.INITD)
- I/O space mode
- Memory base addr
- Ethernet phys addr
- Frame types to receive
- Enable 16 tx collisions
- INTR0 on packet receive
  - Set PacketPage+022h to 0x0000
- Leave DMA disabled
- Select media interface (auto-select)
- See 3.3 page 18, 3.4 page 20
- Control regs: 4.4 page 46

Packet transmission:
- Phase 1:
  - Transmit Command: includes info on threshold at which to start transmit
    (5, 381, 1021, or all)
  - Transmit Length: indicates buffer space required
  - When buffer space is available, begin copy frame into CS8900
  - Host supplies Dest Addr, Src Addr, Length, LLC (data)
- Phase 2:
  - CS8900 provides preamble, start-of-frame, adds CRC32, any padding
  - Puts onto media
- See 5.7 page 98.

Packet reception:
- Phase 1:
  - Packet is clocked in and decoded, preamble/s-o-f are stripped
  - Address is passed through programmable addr filter
  - Notifies processor
- Phase 2:
  - Transfer frame into host memory
- See 5.2 page 78 through 5.6 page 95.

Promiscuous mode:
- Adjust address filter

Explicit device reset:
- Set reset bit (SelfCTL.6)

Interrupts:
- On TxEvent (reg8), RxEvent
- Enable interrupts in TxCFG, RxCFG
- Lose packets on transmitter errors (don't bother keeping around)
  Higher layers implement retransmit policy
