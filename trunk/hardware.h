#ifndef __HARDWARE_H__
#define __HARDWARE_H__

#include "LPC22xx.h"

#define BIG_ENDIAN 0
#define LITTLE_ENDIAN 1
#define BYTE_ORDER LITTLE_ENDIAN

// Main init function
extern "C" {
void hwinit();
};

// CCLK, PLL, PCLK
enum { CCLK = 14745600 };
enum { PLL_MULT = 4 };
enum { PCLK = CCLK * PLL_MULT };

// Base addresses for peripherals
enum { UART0_BASE = 0xe000c000,
	   UART1_BASE = 0xe0010000,
	   UART_RBR = 0,
	   UART_THR = 0,
	   UART_IER = 4,
	   UART_IIR = 8,
	   UART_FCR = 8,
	   UART_LCR = 0xc,
	   UART_MCR = 0x10,
	   UART_LSR = 0x14,
	   UART_MSR = 0x18,
	   UART_SCR = 0x1c,
	   UART_DLL = 0,
	   UART_DLM = 4 };


// We only mask IRQ, not FIQ

inline uint DisableInterrupts() {
	uint prev;
	asm volatile("mrs r12, cpsr\n"
				 "mov %0, r12\n"
				 "orr r12, #0x80|0x40\n"
				 "msr cpsr, r12"
				 : "=r" (prev) : : "r12", "cc", "memory");
	return prev;
}

inline void EnableInterrupts(uint prev) {
	asm volatile("msr cpsr, %0" : : "r" (prev) : "cc", "memory");
}


void fault0(uint num);
inline void fault(uint num, bool captive = true) { do fault0(num); while (captive); }


extern "C" {
// These symbols are generated by the linker
extern uint8_t _data;
extern uint8_t _edata;
extern uint8_t _bss_start;
extern uint8_t _bss_end;
extern uint8_t _etext;
extern uint8_t _stack;
extern uint8_t _estack;
extern uint8_t _xflash;
extern uint8_t _exflash;
extern uint8_t _stack;
extern uint8_t _estack;
};

enum { XRAM_SIZE = 1024*1024 };

#define MALLOC_REGION_START  (&_bss_end)
#define MALLOC_REGION_SIZE   ((&_data + XRAM_SIZE) - &_bss_end)

#define STACK_REGION_START (&_stack)
#define STACK_REGION_SIZE (&_estack - &_stack)

#define DATA_REGION_START (&_data)
#define DATA_REGION_SIZE (&_edata - &_data)

#define TEXT_REGION_START  ((uint8_t*)0)
#define TEXT_REGION_SIZE (&_etext - (uint8_t*)0)

#define XFLASH_REGION_START (&_xflash)
#define XFLASH_REGION_SIZE (&_exflash - &_xflash)


#endif // __HARDWARE_H__
